/*
 * All code and data are from https://github.com/rvanwijnen/spectral.js and https://gist.github.com/mattdesl/73d4e93c78042f3aec5fca5fcaad0dc5
*/


#include "spectral.h"
#include <cmath>

static const float SPD_RED[81] = {0.327457414f, 0.323750578f, 0.313439461f, 0.288879383f, 0.239205681f, 0.189702037f, 0.121746068f, 0.074578271f, 0.044433159f, 0.028928632f, 0.022316653f, 0.016911307f, 0.014181107f, 0.013053143f, 0.011986164f, 0.011288715f, 0.010906066f, 0.010400713f, 0.010637360f, 0.010907663f, 0.011032712f, 0.011310657f, 0.011154642f, 0.010148770f, 0.008918582f, 0.007685576f, 0.006705708f, 0.005995806f, 0.005537257f, 0.005193784f, 0.005025362f, 0.005136363f, 0.005433200f, 0.005819986f, 0.006400573f, 0.007449529f, 0.008583636f, 0.010395762f, 0.013565434f, 0.019384516f, 0.032084071f, 0.074356038f, 0.624393724f, 0.918310033f, 0.949253030f, 0.958187833f, 0.958187751f, 0.958187625f, 0.955679061f, 0.958006155f, 0.954101573f, 0.947607606f, 0.938681328f, 0.924466683f, 0.904606025f, 0.880412199f, 0.847787873f, 0.805779127f, 0.752531854f, 0.686439397f, 0.618694571f, 0.540264444f, 0.472964416f, 0.432701597f, 0.405358046f, 0.385491835f, 0.370983585f, 0.357608702f, 0.348712800f, 0.344880119f, 0.341917877f, 0.339531093f, 0.337169504f, 0.336172019f, 0.335167443f, 0.334421625f, 0.334008760f, 0.333915793f, 0.333818455f, 0.333672775f, 0.333569513f};

static const float SPD_GREEN[81] = {0.331861713f, 0.329688188f, 0.327860022f, 0.319173580f, 0.294322584f, 0.258697065f, 0.188894319f, 0.125388382f, 0.078687060f, 0.053143271f, 0.042288146f, 0.033318346f, 0.029755948f, 0.030331251f, 0.030988572f, 0.031686355f, 0.034669962f, 0.034551957f, 0.040684806f, 0.054460037f, 0.080905287f, 0.146348303f, 0.379679643f, 0.766744269f, 0.876214748f, 0.918491656f, 0.940655563f, 0.953731885f, 0.961643280f, 0.967200020f, 0.970989746f, 0.972852304f, 0.973116594f, 0.973351069f, 0.973351116f, 0.972261080f, 0.973351022f, 0.973148495f, 0.971061306f, 0.966371306f, 0.954941968f, 0.913578990f, 0.364348804f, 0.071507243f, 0.041230434f, 0.032423874f, 0.031924630f, 0.031276033f, 0.032630370f, 0.029530872f, 0.031561761f, 0.035674218f, 0.041403005f, 0.050604260f, 0.063434300f, 0.078918245f, 0.099542743f, 0.125595760f, 0.157590910f, 0.195398239f, 0.231474475f, 0.268852136f, 0.296029164f, 0.309754994f, 0.317815883f, 0.322990347f, 0.326353848f, 0.329143902f, 0.330808727f, 0.331482690f, 0.331984550f, 0.332341173f, 0.332912009f, 0.332919280f, 0.333027673f, 0.333179705f, 0.333247031f, 0.333259349f, 0.333275050f, 0.333294328f, 0.333309425f};

static const float SPD_BLUE[81] = {0.340680792f, 0.346561187f, 0.358700493f, 0.391947027f, 0.466471731f, 0.551600896f, 0.689359611f, 0.800033347f, 0.876879781f, 0.917928097f, 0.935395201f, 0.949770347f, 0.956062945f, 0.956615607f, 0.957025265f, 0.957024931f, 0.954423973f, 0.955047329f, 0.948677833f, 0.934632300f, 0.908062000f, 0.842341039f, 0.609165715f, 0.223106961f, 0.114866670f, 0.073822768f, 0.052638729f, 0.040272309f, 0.032819463f, 0.027606196f, 0.023984891f, 0.022011333f, 0.021450205f, 0.020828945f, 0.020248311f, 0.020289391f, 0.018065342f, 0.016455742f, 0.015373260f, 0.014244178f, 0.012973962f, 0.012064974f, 0.011257478f, 0.010182725f, 0.009516535f, 0.009388293f, 0.009887619f, 0.010536342f, 0.011690569f, 0.012462973f, 0.014336665f, 0.016718175f, 0.019915666f, 0.024929056f, 0.031959674f, 0.040669554f, 0.052669382f, 0.068625111f, 0.089877232f, 0.118162359f, 0.149830947f, 0.190883409f, 0.231006403f, 0.257543385f, 0.276826039f, 0.291517773f, 0.302662506f, 0.313247301f, 0.320478325f, 0.323636995f, 0.326097309f, 0.328127369f, 0.329917976f, 0.330907901f, 0.331803633f, 0.332396627f, 0.332740781f, 0.332820857f, 0.332901731f, 0.333025967f, 0.333111083f};

static const float CMF_X[81] = {0.000032348f, 0.000055345f, 0.000109712f, 0.000248676f, 0.000560325f, 0.000955933f, 0.001883435f, 0.003396138f, 0.005940683f, 0.009151623f, 0.011644017f, 0.014886349f, 0.017280890f, 0.018269793f, 0.018613167f, 0.017704928f, 0.016210296f, 0.013821903f, 0.010617328f, 0.007758482f, 0.005245854f, 0.003081053f, 0.001648031f, 0.000758713f, 0.000253535f, 0.000123299f, 0.000474370f, 0.001463582f, 0.003137073f, 0.005509365f, 0.008432888f, 0.011327476f, 0.014345805f, 0.017738600f, 0.021338869f, 0.024718236f, 0.028129296f, 0.031510755f, 0.034737572f, 0.038293448f, 0.041529413f, 0.042708709f, 0.043065991f, 0.044671789f, 0.045236160f, 0.044428484f, 0.042504837f, 0.039361202f, 0.035455761f, 0.030395676f, 0.025316176f, 0.021408237f, 0.017738193f, 0.013975302f, 0.010734839f, 0.008290878f, 0.006258656f, 0.004659214f, 0.003402523f, 0.002415889f, 0.001732401f, 0.001151995f, 0.000748856f, 0.000529624f, 0.000384871f, 0.000280078f, 0.000203686f, 0.000132161f, 0.000084501f, 0.000063740f, 0.000047616f, 0.000034298f, 0.000024514f, 0.000015617f, 0.000009990f, 0.000006116f, 0.000003646f, 0.000003134f, 0.000002624f, 0.000001817f, 0.000001260f};

static const float CMF_Y[81] = {0.000000922f, 0.000001584f, 0.000003103f, 0.000007054f, 0.000015506f, 0.000026382f, 0.000052378f, 0.000095370f, 0.000176832f, 0.000311062f, 0.000475768f, 0.000763124f, 0.001141210f, 0.001564213f, 0.002103808f, 0.002666572f, 0.003344628f, 0.004067856f, 0.004944536f, 0.006147819f, 0.007625247f, 0.009001248f, 0.010709887f, 0.013347152f, 0.016712607f, 0.020924893f, 0.025656760f, 0.030589357f, 0.035203447f, 0.039872520f, 0.043922355f, 0.045904502f, 0.047127747f, 0.048343480f, 0.048981677f, 0.048273090f, 0.047079310f, 0.045454635f, 0.043393477f, 0.041606911f, 0.039430961f, 0.035625505f, 0.031765522f, 0.029376763f, 0.026872545f, 0.024083841f, 0.021324489f, 0.018506141f, 0.015809755f, 0.012985110f, 0.010443317f, 0.008572776f, 0.006930529f, 0.005353067f, 0.004051597f, 0.003093441f, 0.002315209f, 0.001713760f, 0.001245775f, 0.000881268f, 0.000629695f, 0.000417379f, 0.000270842f, 0.000191353f, 0.000138986f, 0.000101140f, 0.000073559f, 0.000047731f, 0.000030518f, 0.000023020f, 0.000017195f, 0.000012381f, 0.000008846f, 0.000005643f, 0.000003611f, 0.000002212f, 0.000001318f, 0.000001125f, 0.000000948f, 0.000000647f, 0.000000450f};

static const float CMF_Z[81] = {0.000152519f, 0.000261131f, 0.000518438f, 0.001177069f, 0.002656749f, 0.004542641f, 0.008977810f, 0.016243540f, 0.028540741f, 0.044275240f, 0.056829693f, 0.073546267f, 0.086685286f, 0.093569306f, 0.098109991f, 0.096891008f, 0.093047543f, 0.084114895f, 0.069980019f, 0.056886438f, 0.044590306f, 0.032761780f, 0.023949742f, 0.018234915f, 0.014073774f, 0.010906837f, 0.008069383f, 0.005617940f, 0.003879817f, 0.002877839f, 0.002148221f, 0.001497284f, 0.001002823f, 0.000660821f, 0.000430765f, 0.000277570f, 0.000184532f, 0.000127734f, 0.000095721f, 0.000081814f, 0.000074783f, 0.000061100f, 0.000046159f, 0.000042275f, 0.000034070f, 0.000025495f, 0.000014414f, 0.000010067f, 0.000007884f, 0.000004045f, 0.000001970f, 0.000001185f, 0.000000792f, 0.000000387f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f, 0.000000000f};

float spectrumToLuminance(float* spectrum) {
    float illum = 0.f;
    for (int i = 0; i < (int)81; i++) {
        illum += CMF_Y[i] * spectrum[i];
    }

    return illum;
}

float linearToLuminance(float r, float g, float b) {
    return 0.212648173f * r + 0.715179242f * g + 0.072172585f * b;
}

float concentration(float sr, float sg, float sb, float sw, float dr, float dg, float db) {
    float sl = linearToLuminance(sr, sg, sb);
    float dl = linearToLuminance(dr, dg, db);

    float dw = 1.f - sw;

    sw = sl * sw * sw;
    dw = dl * dw * dw;

    return sw / (sw + dw);
}

void mixSpectrums(float* spectrum_s, float* spectrum_d, float sw) {
    for (int i = 0; i < (int)81; i++) {
        float ks = 0.f, inv = 0.f;

        inv = (1.f - spectrum_s[i]);
        ks += sw * (inv * inv / (2.f * spectrum_s[i]));

        inv = (1.f - spectrum_d[i]);
        ks += (1.f - sw) * (inv * inv / (2.f * spectrum_d[i]));

        spectrum_d[i] = 1.f + ks - sqrt(ks * ks + 2.f * ks);
    }
}

void linearToSpectrum(float r, float g, float b, float* spectrum) {
    for (int i = 0; i < (int)81; i++) {
        spectrum[i] = SPD_RED[i] * r + SPD_GREEN[i] * g + SPD_BLUE[i] * b;
    }
}

void spectrumToLinear(float* spectrum, float* r, float* g, float* b) {
    float y = spectrumToLuminance(spectrum);

    float x = 0.f, z = 0.f;
    for (int i = 0; i < (int)81; i++) {
        x += CMF_X[i] * spectrum[i];
        z += CMF_Z[i] * spectrum[i];
    }

    *r =  3.240830229f * x - 1.537316904f * y - 0.498589266f * z;
    *g = -0.969229321f * x + 1.875939794f * y + 0.041554444f * z;
    *b =  0.055645287f * x - 0.204032720f * y + 1.057260459f * z;
}
