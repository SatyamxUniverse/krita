#include "spectral.h"
#include <cmath>
#include <xsimd_extensions/xsimd.hpp>

using float_v = xsimd::batch<float, xsimd::current_arch>;

static const size_t vectorized_count = 41 - (41 % float_v::size);

static const float SPD_R[41] = {0.320947482, 0.283606924, 0.146235603, 0.054631501, 0.023332027, 0.026511531, 0.020148817, 0.013093368, 0.010188036, 0.008541553, 0.005690942, 0.005078213, 0.003803978, 0.002789060, 0.002292522, 0.002100614, 0.002487015, 0.002780541, 0.004312311, 0.008073886, 0.014698797, 0.587147286, 0.965548317, 0.955748546, 0.955778327, 0.968488121, 0.974497375, 0.960428319, 0.931077309, 0.869616041, 0.772263800, 0.612333193, 0.497429835, 0.423768395, 0.371808572, 0.354731549, 0.343466993, 0.336723715, 0.334142836, 0.333725267, 0.333156172};

static const float SPD_G[41] = {0.331417649, 0.320604855, 0.222299434, 0.081562514, 0.033370321, 0.049416442, 0.043608245, 0.050741515, 0.053404739, 0.068751837, 0.047489231, 0.290758874, 0.916836235, 0.967537479, 0.981399995, 0.986943516, 0.986047979, 0.986826593, 0.986946170, 0.986111461, 0.981432091, 0.409504129, 0.031244689, 0.040975668, 0.040241836, 0.026028520, 0.018994240, 0.029119786, 0.051482838, 0.097786817, 0.164185475, 0.261512682, 0.314411966, 0.332106744, 0.335965261, 0.335474347, 0.334699999, 0.334103783, 0.333844285, 0.333800128, 0.333734551};

static const float SPD_B[41] = {0.347634868, 0.395788221, 0.631464964, 0.863805985, 0.943297652, 0.924072027, 0.936242938, 0.936165117, 0.936407226, 0.922706610, 0.946819827, 0.704162913, 0.079359786, 0.029673461, 0.016307483, 0.010955870, 0.011465006, 0.010392866, 0.008741519, 0.005814653, 0.003869112, 0.003348585, 0.003206994, 0.003275786, 0.003979837, 0.005483359, 0.006508385, 0.010451895, 0.017439852, 0.032597142, 0.063550724, 0.126154124, 0.188158199, 0.244124860, 0.292226165, 0.309794100, 0.321833000, 0.329172482, 0.332012825, 0.332474531, 0.333109119};

static const float X_BAR[41] = {0.000134128, 0.000587842, 0.003136072, 0.009122718, 0.021392694, 0.026893474, 0.034879478, 0.033718539, 0.027360486, 0.020028137, 0.010634545, 0.003444947, 0.000529080, 0.000999226, 0.006669683, 0.017935176, 0.030489837, 0.045298758, 0.059614142, 0.073458468, 0.087578684, 0.090522110, 0.094743803, 0.088718043, 0.073804624, 0.052594426, 0.036796918, 0.022247113, 0.012934438, 0.007039761, 0.003580039, 0.001543441, 0.000792937, 0.000419361, 0.000173660, 0.000097579, 0.000050081, 0.000020350, 0.000007398, 0.000005300, 0.000002501};

static const float Y_BAR[41] = {0.000009404, 0.000041134, 0.000218016, 0.000636975, 0.001538399, 0.002226533, 0.003739434, 0.005152257, 0.006650846, 0.009832289, 0.015162925, 0.021296782, 0.033233286, 0.051018877, 0.070002617, 0.087340304, 0.093714278, 0.097400847, 0.093617959, 0.086288622, 0.078409096, 0.063166247, 0.053436484, 0.042404087, 0.031437950, 0.020766702, 0.013781467, 0.008056665, 0.004603831, 0.002477244, 0.001252158, 0.000538573, 0.000276376, 0.000146273, 0.000060686, 0.000034192, 0.000017606, 0.000007180, 0.000002620, 0.000001886, 0.000000894};

static const float Z_BAR[41] = {0.000553584, 0.002431743, 0.013016769, 0.038066962, 0.089971732, 0.114909356, 0.153168261, 0.155585992, 0.137494978, 0.115588720, 0.079177918, 0.043915181, 0.026120560, 0.015043552, 0.007251022, 0.004024858, 0.001890593, 0.000825599, 0.000365861, 0.000198198, 0.000156354, 0.000098943, 0.000073648, 0.000034717, 0.000020283, 0.000007352, 0.000003869, 0.000001753, 0.000000863, 0.000000416, 0.000000197, 0.000000083, 0.000000042, 0.000000022, 0.000000009, 0.000000006, 0.000000003, 0.000000001, 0.000000000, 0.000000000, 0.000000000};


static float sumVector(float_v x) {
    float xs[float_v::size];
    x.store_unaligned(xs);

    float sum = 0.0;
    for (size_t i = 0; i < float_v::size; ++i) {
        sum += xs[i];
    }

    return sum;
}

static float linearToKs(float r, float g, float b, float w, size_t i) {
    float spectrum = SPD_R[i] * r + SPD_G[i] * g + SPD_B[i] * b;
    float inv = (1.0 - spectrum);

    return w * (inv * inv / (2.0 * spectrum));
}

static float_v linearToKsV(float r, float g, float b, float w, size_t i) {
    float_v spectrum = float_v::load_unaligned(&SPD_R[i]) * float_v(r) + float_v::load_unaligned(&SPD_G[i]) * float_v(g) + float_v::load_unaligned(&SPD_B[i]) * float_v(b);
    float_v inv = float_v(1.0) - spectrum;

    return float_v(w) * (inv * inv / (float_v(2.0) * spectrum));
}

float linearToKsWeight(float r, float g, float b, float a) {
    float l = 0.212555640 * r + 0.718921671 * g + 0.068522689 * b;
    return a * a * l;
}

void linearToKs(float r, float g, float b, float w, float* KS) {
    for (size_t i = 0; i < vectorized_count; i += float_v::size) {
        float_v ks = linearToKsV(r, g, b, w, i);
        ks.store_unaligned(&KS[i]);
    }

    for (size_t i = vectorized_count; i < 41; ++i) {
        KS[i] = linearToKs(r, g, b, w, i);
    }
}

void addKs(float* srcKs, float* dstKs) {
    for (size_t i = 0; i < vectorized_count; i += float_v::size) {
        float_v ks = float_v::load_unaligned(&srcKs[i]) + float_v::load_unaligned(&dstKs[i]);
        ks.store_unaligned(&dstKs[i]);
    }

    for (size_t i = vectorized_count; i < 41; ++i) {
        dstKs[i] = srcKs[i] + dstKs[i];
    }
}

void ksToLinear(float* KS, float* r, float* g, float* b, float w, float offset) {
    float invW = 1.0 / w;
    float_v x_v(0.0), y_v(0.0), z_v(0.0);
    for (size_t i = 0; i < vectorized_count; i += float_v::size) {
        float_v ks = float_v::load_unaligned(&KS[i]) * float_v(invW) + float_v(offset);
        float_v spectrum = float_v(1.0) + ks - sqrt(ks * ks + float_v(2.0) * ks);

        x_v += float_v::load_unaligned(&X_BAR[i]) * spectrum;
        y_v += float_v::load_unaligned(&Y_BAR[i]) * spectrum;
        z_v += float_v::load_unaligned(&Z_BAR[i]) * spectrum;
    }

    float x = sumVector(x_v);
    float y = sumVector(y_v);
    float z = sumVector(z_v);

    for (size_t i = vectorized_count; i < 41; ++i) {
        float ks = KS[i] * invW + offset;
        float spectrum = 1.0 + ks - sqrt(ks * ks + 2.0 * ks);

        x += X_BAR[i] * spectrum;
        y += Y_BAR[i] * spectrum;
        z += Z_BAR[i] * spectrum;
    }

    *r =  3.057422561 * x - 1.537986151 * y - 0.519436410 * z;
    *g = -0.909222201 * x + 1.866174374 * y + 0.043047828 * z;
    *b =  0.055268340 * x - 0.214900629 * y + 1.159632289 * z;
}
